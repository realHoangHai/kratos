// Code generated by go-bindata. DO NOT EDIT.
// sources:
// policy/authz.rego (2.326kB)
// policy/common.rego (2.11kB)
// policy/introspection.rego (1.924kB)

package opa

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _policyAuthzRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5b\x8e\xa3\x30\x10\xfc\x0e\x12\x77\xe8\xe5\x2b\x44\x28\x07\x18\x89\x93\x20\x64\x39\xd0\xd9\x78\xd6\x60\x64\x9b\x19\xcd\xac\xe6\xee\x2b\xbf\xc0\x24\x24\x24\xd2\x7e\x81\x8b\xea\xaa\xea\xc6\x98\x81\x36\x7f\xe8\x6f\x04\x3a\xea\xcb\x77\x9a\xa4\x09\xeb\x06\x21\x35\xb4\x54\xd3\x63\x23\xba\x4e\xf4\x4b\x6c\x10\x9c\x35\x0c\xd5\x12\x95\x82\x1b\x28\x4d\x5a\x3c\xd3\x91\x6b\xab\x27\x24\xfb\xc6\x16\x4a\x38\x53\xae\xd0\x3c\xbd\x50\x45\x3a\xec\x4e\x28\xab\x41\x70\xc2\xda\x1a\xfe\xa6\xc9\xce\xdc\xab\xf1\x04\x6f\x25\x04\xf9\xf0\xfc\xe8\xe8\xaa\x22\x75\x9a\xec\x58\x3f\x8c\x3a\x50\xed\xe2\xa8\xc6\xd3\x3b\x36\xda\x13\x5c\xe2\x00\x92\x8e\xea\xe6\x82\x6a\x3f\xd5\x15\xe0\xbd\xf2\x34\xf9\x09\x89\x24\x2a\x31\xca\x06\x2b\x6f\x5a\x80\xd2\x54\x63\x87\xbd\x36\x11\x5c\xc6\x19\x0a\xf4\xd5\xb8\x13\x4d\x55\x0b\x91\x63\xa8\x5a\x06\x0d\xe8\x32\xe9\x04\xc7\x49\x02\x16\x92\xf7\x82\x7c\x32\xde\x36\x54\xb6\x7b\x9a\xdb\x8c\x8d\xe8\x35\x65\xbd\xda\xd3\x02\xb2\x43\x96\x43\x39\xcd\xde\x96\xd0\x46\x33\xd1\x47\x5e\x46\x5f\x48\x6c\x5d\x79\xac\xe8\x71\x3b\x73\x23\xe3\xd6\xdb\x3a\x25\xc4\x0f\xf7\x6a\xe0\x4c\x7b\xb1\x02\xb2\xb7\x2c\x2f\xc0\x61\xa6\xc8\xac\xf3\x6b\xc1\x7d\xa5\x50\x7e\x30\xd3\x7c\x76\xc8\xea\x02\xe6\x35\x29\x80\xd4\xc6\x43\xcb\x11\x1f\xd4\xe9\xaf\x61\xa5\xda\xa1\x4f\x09\x64\x87\xac\x80\x0f\x94\xa7\x6b\x7b\x8b\xdd\x17\x58\xd4\x91\x27\x2b\xea\x02\x48\x4c\x30\x5b\xd2\x91\x9e\xdc\x90\x8e\xfc\xda\x76\x74\x35\x7e\x33\xde\xbc\x4f\xb3\x07\x1d\x18\x5b\x3b\x24\xfe\x72\x9e\x88\xf9\xc2\x17\x22\x38\x42\x09\xe6\x42\x58\x9b\x26\x3b\x7b\xa8\x54\x7e\x1d\x47\x0e\x2c\x87\x6c\x35\x10\x51\xe3\xec\x83\x14\xe6\x8c\xa8\x2a\x7f\xe3\x8e\x86\x7b\x5d\x48\xf1\xfe\xda\x80\xbd\xaa\x9f\x70\x58\x59\x0d\x77\x3f\xa5\x35\xeb\x7c\xe6\x44\x14\x57\x6c\x13\xaf\x16\xc1\xcc\x9c\x53\x96\x25\xf8\xc3\xa5\x11\xbd\xd2\x84\x72\x1e\x7a\x55\x57\x49\xdc\x9c\xe6\x87\x2f\x3a\xfd\xda\x76\x82\x6b\x93\xdb\x71\xd8\xf9\x87\x36\xad\x69\x55\xe1\xf9\xbc\xf5\x46\x1c\xe5\xb5\x77\xe2\x6a\xd2\x64\x77\xfb\x1f\xf2\xe0\xd6\xaf\xc0\xd3\x1e\xef\xfb\x70\x4a\x72\x2e\x3e\x6d\x56\xdf\x55\x66\x91\xcc\x9f\x63\x81\xd6\x62\xff\xb5\x60\x19\xe0\x9a\x14\xfd\x4e\x0d\xd5\x0a\xd9\x13\x5b\x83\xa1\xc7\x8e\xd8\x4e\x5b\xdb\x5f\xeb\xd5\x10\x0f\x1b\x7c\xf6\xe3\x98\x7b\x60\x5b\xbe\xbe\xad\xff\x69\x3b\x4f\x65\xdd\xfa\xde\x3c\xe6\xc9\xad\xa5\x4e\x93\x9f\x7f\x01\x00\x00\xff\xff\x45\xd3\xf1\xca\x16\x09\x00\x00")

func policyAuthzRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyAuthzRego,
		"policy/authz.rego",
	)
}

func policyAuthzRego() (*asset, error) {
	bytes, err := policyAuthzRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/authz.rego", size: 2326, mode: os.FileMode(0644), modTime: time.Unix(1720940375, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x7d, 0x2a, 0x41, 0x4a, 0x7f, 0x20, 0x7d, 0x7d, 0x1f, 0x6f, 0x8f, 0xc7, 0x32, 0xd9, 0x79, 0xaa, 0x6f, 0x47, 0xe2, 0xa8, 0x62, 0xe0, 0x1a, 0xe3, 0xe7, 0x7a, 0x87, 0x30, 0x1, 0xe8, 0x36}}
	return a, nil
}

var _policyCommonRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\x1b\xb7\x13\x3d\x5b\x80\xbe\xc3\xfc\xd6\x01\x24\x19\x6b\xe9\x87\x5e\x8a\x2e\xaa\x83\x91\xf4\x52\x04\x69\x90\x18\xbd\x04\x81\x30\xcb\x1d\x69\x59\xaf\x48\x82\x33\xb4\xac\x18\xf6\x67\x2f\x48\xee\xca\x92\xd3\x36\x6e\x50\x9d\x44\xee\xbc\xf7\x38\x6f\xfe\x9c\xc3\x7b\x54\x37\xb8\x21\x50\x76\xbb\xb5\x06\x94\x35\x82\xda\x30\xac\x83\x51\xa2\xad\x61\x40\xd3\x80\x0f\x1d\x31\x48\x8b\x02\xe8\x09\xb8\x45\x4f\xcd\x78\x74\x0e\x35\xc9\x8e\xc8\x80\xb4\x04\x18\xa4\xfd\x92\xc2\xb5\x11\x6f\xd9\x51\x62\x00\x4f\x1b\x0b\x9d\xdd\x68\x35\x1e\xb9\x13\xb9\xf1\x68\x3c\x52\xd6\xb0\xac\xb0\xeb\x56\xce\xdb\x3f\x48\x09\xc3\x12\x8a\xc7\xc7\xab\xb7\x6f\x2f\xdf\x7f\xf8\xed\xd7\x5f\x5e\x5f\x7f\x7c\x7c\x2c\x62\xe8\x79\x54\xfc\x1d\xbd\xc6\xba\x23\xa0\x3b\x87\x86\x75\x64\x39\x8f\x5f\x8d\x5d\xdd\xf6\xdf\x78\x8a\x33\xb8\x1f\x8f\xce\x86\x74\xa6\x58\x42\xf1\xea\xbe\x98\xc1\x72\x09\x6b\xec\x98\xc6\xa3\x87\x08\xfa\x0a\xa1\x4d\x43\x77\x76\xfd\x04\xf8\x19\x8e\xaf\x1e\x8a\x59\x8f\x3c\x87\x37\xb4\xd6\x26\xd9\x42\x07\xbb\x60\x92\x9e\xd5\x4c\x60\xd7\x6a\xd5\x82\x27\x09\xde\x30\x68\x61\xb8\xc5\x2e\x10\xdc\x6a\x4c\x08\x1b\xc4\x05\x81\xe1\x01\x91\xb0\xc7\x52\x33\x99\xc7\xe3\x3b\x2b\x54\x81\x0a\xde\x93\x91\x6e\x5f\x82\x35\xdd\x3e\xa7\xdd\x64\x55\x6b\xe8\x40\x00\x3b\x82\x1b\x63\x77\x15\xbc\xba\xc7\x1f\xaa\xc0\xe4\x0d\x6e\xe9\x61\x3e\x1e\x65\xc8\xd4\x7a\xbd\x99\xc1\x12\x06\x95\x94\x2f\xbb\x4e\xcb\x54\x1b\x17\x64\xce\xa1\x4e\x05\xf8\xb4\xfa\x5c\x42\x51\x15\x25\x7c\x2a\x22\x4f\x51\xc2\xaa\x84\x81\xf1\xf3\x6c\x3c\x3a\x3b\x70\x54\x4b\xf0\xe4\x3a\x54\x94\xf8\x93\x6b\xc7\xf2\xc5\x13\x70\x70\x6e\xa7\xbb\x46\xa1\x6f\x06\xcb\xc9\x34\xbc\xd3\xd2\x26\x83\xab\x8b\x23\x87\x5f\xb7\xa4\x6e\x72\xdb\x69\x81\xc6\x12\x83\xb1\x02\x64\x1a\x88\x80\x14\x0d\x57\xef\xde\x1c\x42\x74\x0e\x40\x60\xdb\x69\x41\xbf\x87\xe2\xa2\x38\x32\xf3\xba\x25\xe8\x50\x84\x7c\x0c\x6d\xa2\x7f\x6c\x33\x7a\x47\xf1\x3c\xc9\xec\xc1\x65\x81\x49\x36\xc6\x13\xdb\xe0\x15\xc1\x12\x2e\x26\x91\x2d\xcf\x83\x36\x60\x83\x07\x87\x5e\x34\x76\xe0\x89\x43\x27\x7c\x90\x3b\xf0\xe2\xad\xd5\x0d\x14\xc6\x4a\x51\xf6\x7d\xd1\xc6\xa6\xf2\xfc\x0c\x0b\xd6\x89\xde\xea\x2f\x98\x26\xaf\x04\xa6\xd4\x17\xad\x88\xe3\x6a\xb1\xd8\x68\x69\x43\x3d\x57\x76\xbb\xb0\x8e\xcc\xa5\xb3\x9d\x56\xfb\x4b\xdc\x90\x91\x85\x75\xb8\xd0\xcc\x81\x78\xf1\xe3\xff\x7f\x9a\xc7\x79\x90\xd5\x37\xad\x3e\x9a\x87\x33\x84\xff\x2d\xa3\x5f\x07\xfb\xaf\x5b\xcd\xc0\xc1\x39\xeb\x25\x35\x1c\x13\xd4\x81\x63\xd3\x73\xb6\xa0\x8a\x61\x91\xfc\x0a\x06\x29\xd8\xe2\x3e\x77\xaa\x55\x2a\xf8\x68\x92\x24\xd7\x59\x80\xf3\x46\x48\x0e\x4d\xeb\xaf\x50\xb1\x74\x75\xda\x0d\xb5\x36\xd4\xd7\x18\xc1\x79\x5a\xeb\x3b\x98\xd2\x7c\x33\x07\x85\x26\x86\x31\xee\xa1\xb8\xab\xf6\xd5\xda\xda\x8b\x62\x96\x19\xd5\x09\x23\x3a\xd7\xe9\x38\x9e\x36\x3d\xa0\x9f\xa3\xe1\x0d\x69\x4f\xa1\xd9\x43\x43\xe4\xc8\x0f\xd7\x1c\x89\xe2\x2f\xab\x15\x18\x3b\x6c\x8b\xa2\x5a\xe2\x78\xaa\x8b\x04\x8c\xff\x2a\x55\x94\x40\xa2\xe6\x51\x7d\x50\x5d\xa5\xd8\x68\x6f\x9d\x1d\x67\x41\x2f\x07\xcf\xc5\xeb\xed\xb4\x2e\xa3\xcb\xb3\x43\x9b\x47\xc9\x0f\x43\x87\x25\xbc\x36\x9b\x74\x3f\xf4\xdd\xaa\x7f\xc1\x54\x9b\x12\x58\xac\xa7\x26\xb3\x9f\xec\xbc\xfe\x43\xba\x3e\x2a\xfd\xd3\xb5\x36\xb1\xdc\xf9\xdc\x8b\x7f\xaf\xc2\x5f\xb0\x3f\xb3\xe0\x88\xe8\xa5\x5a\xff\x3a\x95\x7e\xb1\xfd\x07\x32\x2f\xcb\xe7\x54\xef\x6f\x05\x57\xb9\xc0\xb0\x04\xf1\x81\x0e\x35\xfe\x98\xd7\xeb\x69\x89\xfb\x9d\xfb\x0f\xfe\xbf\xb4\x94\xdf\x62\xfa\x9e\x92\x3d\xe7\x3c\xcd\xec\xcf\x00\x00\x00\xff\xff\xf2\xd7\xc3\xb2\x3e\x08\x00\x00")

func policyCommonRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyCommonRego,
		"policy/common.rego",
	)
}

func policyCommonRego() (*asset, error) {
	bytes, err := policyCommonRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/common.rego", size: 2110, mode: os.FileMode(0644), modTime: time.Unix(1720940392, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0x5d, 0x66, 0x3f, 0x84, 0x88, 0x8c, 0xb3, 0x41, 0x40, 0x9e, 0x2, 0x61, 0x75, 0x8e, 0x9d, 0x89, 0xcd, 0xca, 0x3d, 0x3d, 0x2b, 0x63, 0x3, 0xf, 0xdc, 0xb5, 0x9f, 0x47, 0xa5, 0xd3, 0x6d}}
	return a, nil
}

var _policyIntrospectionRego = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\xc1\x6e\xdb\x3a\x10\x3c\x9b\x00\xff\x61\xe1\x77\xc8\x2b\xe0\xfa\x03\x02\xe8\x13\xda\x53\x6f\x82\x21\xac\xc9\x75\xc4\x46\xe2\x0a\xe4\xca\x81\x53\xe4\xdf\x0b\x92\x92\xa3\xc4\x0e\x9a\x14\x41\x4f\x36\x97\xb3\x43\xce\xec\x48\x1a\xd0\xdc\xe3\x1d\x01\x8e\xd2\x3e\x6e\x9d\x97\xc0\x71\x20\x23\x8e\xbd\x56\x5a\xb9\x7e\xe0\x20\x60\x51\x70\x9b\x21\x80\xb1\x60\x5f\xee\x19\xee\xfb\xd4\xb1\xac\x0d\xdc\x39\xe3\x28\xbe\xac\x06\xee\x52\x49\x2b\xc3\x3e\x4a\x13\x4f\x51\xa8\x6f\xe4\x34\x10\x54\xb0\x2e\xcb\x75\xda\x1f\xd0\x85\xa6\x47\x31\x2d\xc5\x26\x50\xe4\x31\x18\xaa\xeb\x81\xbb\xc6\xd9\x0d\x44\x41\xa1\x9e\xbc\xe4\x55\x02\xef\x76\xf0\x4b\xab\xd5\x7c\xec\x84\xdc\x6d\xcf\xc8\x58\x2f\x9b\x76\xdb\x99\x34\xd6\xcd\x0e\xaa\x05\xe3\xbc\xa1\xd5\xca\xf9\x61\x94\x6d\xa2\x9f\x50\xe9\xaf\x56\xab\x22\xf8\x4c\x31\x5f\xf4\xff\xb4\x7d\xae\x6e\xae\x70\x7e\xd1\xea\xe9\x42\x1e\x66\xc3\x3f\x55\x5c\xa1\xbc\x90\x86\xd3\x68\xdf\x14\x56\x82\x50\x60\x2f\x55\x95\xda\xe6\x82\xec\x5f\x29\x4a\xc9\x81\x0a\xd2\x4f\xe3\xac\x56\xab\x1c\xa5\x7a\x5a\xbf\x52\x9c\xab\x9f\x20\x76\xc1\x33\xeb\xfc\x0f\x7e\xb4\x2e\x82\xc1\x31\x52\x04\x69\x09\x5a\x8c\x4d\x4f\xfd\x9e\x02\x44\x12\x10\x86\x3d\xc1\x1d\x79\x0a\x28\x64\x01\xbd\x85\x9e\x7a\x76\x8f\x64\x81\xbd\x21\x70\x3e\x0a\xa1\x05\x3e\x24\xba\x03\x07\x20\x34\x2d\x64\x2f\x4e\x5b\xf8\xc6\x81\xf8\x48\x01\x9c\xc0\x10\xe8\x98\xcc\xc8\x07\xed\xd1\xdc\x4b\x40\x73\xef\xfc\x1d\x1c\x02\xf7\xf3\x29\x69\x6d\xc7\xa1\x73\x06\x85\x12\x27\xfa\xf8\x40\x21\x75\xa1\x40\x8b\x47\x9a\x6e\x45\x47\xec\xc6\x7c\xab\xfd\x29\x53\xce\xb9\xcc\xb7\x2c\x42\xa1\x38\x11\xe2\x56\xab\x85\xb4\x6a\x7a\x49\x3c\x97\x92\x1b\x19\xdb\x24\xcf\xea\x9a\x0e\x07\x32\x52\xc6\xbb\x81\x6b\xa3\x9f\x86\x5e\x80\x70\x5b\xc1\xfb\xc7\x5f\x7a\xb4\x5a\x3d\x9f\x3f\x37\xa5\x18\x7d\xfc\x6d\xf1\xba\xeb\x3d\x91\x3d\x47\xe0\x3b\x0b\xdd\x26\x4f\x03\xc9\x18\x7c\xb6\x32\x8e\xfb\x34\x7e\x3e\xe4\x55\x32\x8b\x43\x9e\x79\x0e\xde\x5c\x1f\x02\x1f\x9d\x25\x0b\x39\x94\x9b\x44\xc6\x63\x80\x30\x76\x14\xa1\x1f\xa3\xc0\xba\x70\xae\x33\xfc\x26\x35\xdf\x94\x77\xa7\x56\xd8\x75\xfc\x40\xb6\xf8\x9d\xaf\x94\xfd\x5c\x0e\x61\x9d\x31\xeb\x79\x0a\xcd\x06\x9a\xf3\xbd\x2d\x79\xf7\x87\x6e\x4b\xfe\x74\xbd\xf9\x59\x50\xc6\xa6\x3c\x2c\x6e\x03\x5f\x61\xc1\x9e\xf1\xf3\x6e\xe0\x9f\x64\xa4\x9e\x7e\xa7\xc7\xbe\x2c\x3e\x16\x81\xa9\x29\x3d\xc3\x5a\xad\x26\xa1\x50\xfd\x55\x8a\x5e\x67\x79\x91\x25\xcf\x72\xc9\x58\xbe\x50\x15\x5c\x7c\xb6\xae\xb8\x73\x4d\xf0\x5b\x6e\x68\xf5\xf4\x3b\x00\x00\xff\xff\xd4\x27\x2d\x24\x84\x07\x00\x00")

func policyIntrospectionRegoBytes() ([]byte, error) {
	return bindataRead(
		_policyIntrospectionRego,
		"policy/introspection.rego",
	)
}

func policyIntrospectionRego() (*asset, error) {
	bytes, err := policyIntrospectionRegoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy/introspection.rego", size: 1924, mode: os.FileMode(0644), modTime: time.Unix(1720940406, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0xca, 0x46, 0x9f, 0x92, 0x2c, 0x65, 0xd, 0xd6, 0xe8, 0xea, 0x2b, 0x39, 0x7c, 0xfb, 0xfe, 0xd, 0x93, 0x13, 0xcb, 0x37, 0xa7, 0x38, 0xa0, 0xed, 0x23, 0x5a, 0x99, 0x70, 0x17, 0x2b, 0x65}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"policy/authz.rego":         policyAuthzRego,
	"policy/common.rego":        policyCommonRego,
	"policy/introspection.rego": policyIntrospectionRego,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"policy": {nil, map[string]*bintree{
		"authz.rego":         {policyAuthzRego, map[string]*bintree{}},
		"common.rego":        {policyCommonRego, map[string]*bintree{}},
		"introspection.rego": {policyIntrospectionRego, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
