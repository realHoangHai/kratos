syntax = "proto3";
package kratos.api;

option go_package = "github.com/realHoangHai/kratos/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Client client = 2;
  Data data = 3;
  Tracer trace = 4;
  Logger logger = 5;
  Registry registry = 6;
  RemoteConfig config = 7;
  OSS oss = 8;
  Notification notify = 9;
}

message Server {
  // http
  message HTTP {
    // cors
    message CORS {
      repeated string headers = 1;
      repeated string methods = 2;
      repeated string origins = 3;
    }

    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
    CORS cors = 4;
    Middleware middleware = 5;
    bool enable_swagger = 6;
    bool enable_pprof = 7;
  }

  // grpc
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
    Middleware middleware = 4;
  }

  // websocket
  message Websocket {
    string network = 1; // network: http、https
    string addr = 2;  // address
    string path = 3;  // path
    string codec = 4;  // codec: json,xml,yaml...
    google.protobuf.Duration timeout = 5; // timeout
  }

  // Kafka
  message Kafka {
    repeated string endpoints = 1;  // addresses
    string codec = 2;  // codec: json,xml,yaml...
  }

  // asynq
  message Asynq {
    string endpoint = 1;  // endpoint
    string password = 2;  // redis password
    int32 db = 3;  // db
    string location = 4; // timezone
  }

  // rpc
  HTTP http = 1;
  GRPC grpc = 2;

  // message queue
  Kafka kafka = 3;

  // real time
  Websocket websocket = 4;

  // task queue
  Asynq asynq = 5;
}

message Client {
  message HTTP {
    google.protobuf.Duration timeout = 1;
    Middleware middleware = 2;
  }
  message GRPC {
    google.protobuf.Duration timeout = 1;
    Middleware middleware = 2;
  }

  HTTP http = 1;
  GRPC grpc = 2;
}

message Middleware {
  // JWT
  message Auth {
    string method = 1; // JWT signature algorithm, supported algorithm: HS256
    string key = 2; // JWT secret key
  }

  // rate limiter
  message RateLimiter {
    string name = 1; // Current limiter name, supported: bbr
  }

  // metrics
  message Metrics {
    bool histogram = 1; // histogram
    bool counter = 2; // counter
    bool gauge = 3; // gauge
    bool summary = 4; // summary
  }

  bool enable_logging = 1; // enable logging
  bool enable_recovery = 2; // enable recovery
  bool enable_tracing = 3; // enable tracing
  bool enable_validate = 4; // enable validate
  bool enable_circuit_breaker = 5; // enable circuit breaker

  RateLimiter limiter = 6;
  Metrics metrics = 7;
  Auth auth = 8;
}

message Data {
  // database
  message Database {
    string driver = 1; // driver: mysql, postgresql, mongodb, sqlite, ……
    string source = 2; // data source (DSN)

    bool migrate = 3; // migration
    bool debug = 4; // debug mode
    bool enable_trace = 5; // for tracing
    bool enable_metrics = 6; // for analytics

    int32 max_idle_connections = 7; // maximum number of idle connections in the connection pool
    int32 max_open_connections = 8; // maximum number of open connections in the connection pool
    google.protobuf.Duration connection_max_lifetime = 9; // the maximum length of time a connection can be reused
  }

  // redis
  message Redis {
    string network = 1; // network
    string addr = 2; // server address
    string password = 3; // password
    int32 db = 4; // database

    google.protobuf.Duration dial_timeout = 5; // connection timeout
    google.protobuf.Duration read_timeout = 6; // read timeout
    google.protobuf.Duration write_timeout = 7; // write timeout

    bool enable_tracing = 8; // tracing
    bool enable_metrics = 9; // metrics
  }


  Database database = 1; // DatabaseDSN
  Redis redis = 2; // Redis
}


message Tracer {
  bool enable = 1;
  string batcher = 2; // jaeger or zipkin
  string endpoint = 3;  // port
  double sampler = 4; // sampling rate, default: 1.0
  string env = 5; // environment: dev, debug, product
  bool insecure = 6;
}

message Logger {
  // zap
  message Zap {
    string filename = 1;
    string level = 2;
    int32 max_size = 3;
    int32 max_age = 4;
    int32 max_backups = 5;
  }

  // logrus
  message Logrus {
    string level = 1; // level
    string formatter = 2; // format：text, json.
    string timestamp_format = 3; // define timestamp format, for example: "2006-01-02 15:04:05"
    bool disable_colors = 4; // no need for color logs
    bool disable_timestamp = 5; // no timestamp required
  }

  string type = 1;
  Zap zap = 2;
  Logrus logrus = 3;
}

message Registry {
  message Consul {
    string scheme = 1;
    string address = 2;
    bool health_check = 3;
  }
  message Etcd {
    repeated string endpoints = 1;
  }
  message ZooKeeper {
    repeated string endpoints = 1;
    google.protobuf.Duration timeout = 2;
  }
  message Nacos {
    string address = 1; // address
    uint64 port = 2; // port
    string namespace_id = 3; //
    string log_level = 4; // log level
    string cache_dir = 5; // cache directory
    string log_dir = 6; // log directory
    int32 update_thread_num = 7; // number of threads to update the service
    google.protobuf.Duration timeout = 8; // http request timeout, unit: milliseconds
    google.protobuf.Duration beat_interval = 9; // heartbeat interval, unit: milliseconds
    bool not_load_cache_at_start = 10; // do not read local cache data at startup, true: do not read, false: read
    bool update_cache_when_empty = 11; // Whether to update the local cache when the service list is empty, true: update, false: do not update
  }
  message Kubernetes {}

  string type = 1;

  Consul consul = 2;  // Consul
  Etcd etcd = 3;  // Etcd
  ZooKeeper zookeeper = 4;  // ZooKeeper
  Nacos nacos = 5;  // Nacos
  Kubernetes kubernetes = 6;  // Kubernetes
}

message RemoteConfig {
  message Nacos {}
  message Etcd {}
  message Consul {}
  message Apollo {}
  message Kubernetes {}

  string type = 1;

  Etcd etcd = 2;
  Consul consul = 3;
  Nacos nacos = 4;
  Apollo apollo = 6;
}

message OSS {
  // minio
  message MinIO {
    string endpoint = 1;  // ip:port
    string access_id = 2;  // access key id
    string secret_key = 3;  // secret key
    string token = 4; // token
    bool use_ssl = 5; // use ssl
    string upload_host = 6;  // hostname of upload link
    string download_host = 7;  // hostname of download link
  }

  MinIO minio = 1;
}

message Notification {
  // sms
  message SMS {
    string endpoint = 1; // endpoint
    string region_id = 2; // region id
    string access_key_id = 3; // access key id
    string access_key_secret = 4; // access key secret
  }

  SMS sms = 1;
}
