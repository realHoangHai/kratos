# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Kratos API
    description: Description of Kratos API
    contact:
        name: realHoangHai
        url: https://github.com/realHoangHai
        email: aflyingpenguin2lth@gmail.com
    license:
        name: MIT
        url: https://github.com/realHoangHai/kratos/blob/main/LICENSE
    version: "1.0"
paths:
    /admin/v1/users:
        get:
            tags:
                - UserService
            description: List of users for admin
            operationId: UserService_ListUser
            parameters:
                - name: page
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: pageSize
                  in: query
                  schema:
                    type: integer
                    format: int32
                - name: query
                  in: query
                  schema:
                    type: string
                - name: orQuery
                  in: query
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: noPaging
                  in: query
                  schema:
                    type: boolean
                - name: fieldMask
                  in: query
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - UserService
            description: Create user
            operationId: UserService_CreateUser
            parameters:
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /admin/v1/users/{id}:
        get:
            tags:
                - UserService
            description: Get user detail for admin
            operationId: UserService_GetUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        put:
            tags:
                - UserService
            description: Update user for admin
            operationId: UserService_UpdateUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - UserService
            description: Delete user for admin
            operationId: UserService_DeleteUser
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: integer
                    format: uint32
                - name: operatorId
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/login:
        post:
            tags:
                - AuthenticationService
            description: APP Login
            operationId: AuthenticationService_Login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
            security:
                - {}
    /v1/logout:
        post:
            tags:
                - AuthenticationService
            description: APP Logout
            operationId: AuthenticationService_Logout
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogoutRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/me:
        get:
            tags:
                - AuthenticationService
            description: APP Get the data of logged in user
            operationId: AuthenticationService_GetMe
            parameters:
                - name: id
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        ListUserResponse:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                total:
                    type: integer
                    format: int32
            description: List of users reply
        LoginRequest:
            required:
                - user_name
                - password
                - grant_type
            type: object
            properties:
                user_name:
                    type: string
                password:
                    type: string
                grant_type:
                    type: string
                    default: password
                    description: Authorization type, the value here is fixed to "password", required.
                scope:
                    type: string
                client_id:
                    type: string
                    description: The application's identification ID
                client_secret:
                    type: string
                    description: Application password
            description: User background login - request
        LoginResponse:
            required:
                - access_token
                - refresh_token
            type: object
            properties:
                access_token:
                    type: string
                    description: Access token, required. The access token string issued by the authorization server.
                refresh_token:
                    type: string
                    description: Refresh token, used to obtain the next access token, optional. If the access token is about to expire, it is useful to return a refresh token that the application can use to obtain another access token. However, refresh tokens cannot be issued for tokens issued through implicit grants.
                token_type:
                    type: string
                    default: Bearer
                    description: The type of token. This value is case-insensitive and required. It can be bearer type or mac type. It is usually just the string "Bearer".
                expires_in:
                    type: string
                    description: The token validity time, in seconds. If the access token expires, the server should reply with the duration of the access token granted. If this parameter is omitted, the expiration time must be set in other ways.
                scope:
                    type: string
                    description: A space-separated list of user grant scopes. If not provided, scope grants any scope, defaults to an empty list.
            description: User background login - response
        LogoutRequest:
            type: object
            properties:
                id:
                    type: integer
                    format: uint32
            description: User background logout - request
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: uint32
                userName:
                    type: string
                email:
                    type: string
                avatar:
                    type: string
                description:
                    type: string
                password:
                    type: string
                createTime:
                    type: string
                updateTime:
                    type: string
                status:
                    enum:
                        - ON
                        - OFF
                    type: string
                    default: ON
                    description: User status
                roleId:
                    type: integer
                    description: RoleID
                    format: uint32
                creatorId:
                    type: integer
                    description: CreatorID
                    format: uint32
                authority:
                    type: integer
                    default: CUSTOMER_USER
                    description: Permissions
                    format: enum
            description: User
    securitySchemes:
        BasicAuth:
            type: http
            scheme: basic
tags:
    - name: AuthenticationService
      description: The authentication service definition for user APP.
    - name: UserService
      description: The user service definition.
