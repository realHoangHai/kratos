// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realHoangHai/kratos/app/core/internal/data/ent/permission"
)

// PermissionCreate is the builder for creating a Permission entity.
type PermissionCreate struct {
	config
	mutation *PermissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (pc *PermissionCreate) SetCreateTime(i int64) *PermissionCreate {
	pc.mutation.SetCreateTime(i)
	return pc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableCreateTime(i *int64) *PermissionCreate {
	if i != nil {
		pc.SetCreateTime(*i)
	}
	return pc
}

// SetUpdateTime sets the "update_time" field.
func (pc *PermissionCreate) SetUpdateTime(i int64) *PermissionCreate {
	pc.mutation.SetUpdateTime(i)
	return pc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableUpdateTime(i *int64) *PermissionCreate {
	if i != nil {
		pc.SetUpdateTime(*i)
	}
	return pc
}

// SetDeleteTime sets the "delete_time" field.
func (pc *PermissionCreate) SetDeleteTime(i int64) *PermissionCreate {
	pc.mutation.SetDeleteTime(i)
	return pc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDeleteTime(i *int64) *PermissionCreate {
	if i != nil {
		pc.SetDeleteTime(*i)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PermissionCreate) SetName(s string) *PermissionCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableName(s *string) *PermissionCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetGuardName sets the "guard_name" field.
func (pc *PermissionCreate) SetGuardName(s string) *PermissionCreate {
	pc.mutation.SetGuardName(s)
	return pc
}

// SetNillableGuardName sets the "guard_name" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableGuardName(s *string) *PermissionCreate {
	if s != nil {
		pc.SetGuardName(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PermissionCreate) SetDescription(i int32) *PermissionCreate {
	pc.mutation.SetDescription(i)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PermissionCreate) SetNillableDescription(i *int32) *PermissionCreate {
	if i != nil {
		pc.SetDescription(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PermissionCreate) SetID(u uint32) *PermissionCreate {
	pc.mutation.SetID(u)
	return pc
}

// Mutation returns the PermissionMutation object of the builder.
func (pc *PermissionCreate) Mutation() *PermissionMutation {
	return pc.mutation
}

// Save creates the Permission in the database.
func (pc *PermissionCreate) Save(ctx context.Context) (*Permission, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PermissionCreate) SaveX(ctx context.Context) *Permission {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PermissionCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PermissionCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PermissionCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := permission.DefaultCreateTime()
		pc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PermissionCreate) check() error {
	if v, ok := pc.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := permission.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Permission.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PermissionCreate) sqlSave(ctx context.Context) (*Permission, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PermissionCreate) createSpec() (*Permission, *sqlgraph.CreateSpec) {
	var (
		_node = &Permission{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(permission.Table, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint32))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.SetField(permission.FieldCreateTime, field.TypeInt64, value)
		_node.CreateTime = &value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.SetField(permission.FieldUpdateTime, field.TypeInt64, value)
		_node.UpdateTime = &value
	}
	if value, ok := pc.mutation.DeleteTime(); ok {
		_spec.SetField(permission.FieldDeleteTime, field.TypeInt64, value)
		_node.DeleteTime = &value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.GuardName(); ok {
		_spec.SetField(permission.FieldGuardName, field.TypeString, value)
		_node.GuardName = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeInt32, value)
		_node.Description = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertOne {
	pc.conflict = opts
	return &PermissionUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PermissionCreate) OnConflictColumns(columns ...string) *PermissionUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertOne{
		create: pc,
	}
}

type (
	// PermissionUpsertOne is the builder for "upsert"-ing
	//  one Permission node.
	PermissionUpsertOne struct {
		create *PermissionCreate
	}

	// PermissionUpsert is the "OnConflict" setter.
	PermissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *PermissionUpsert) SetUpdateTime(v int64) *PermissionUpsert {
	u.Set(permission.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateUpdateTime() *PermissionUpsert {
	u.SetExcluded(permission.FieldUpdateTime)
	return u
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PermissionUpsert) AddUpdateTime(v int64) *PermissionUpsert {
	u.Add(permission.FieldUpdateTime, v)
	return u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PermissionUpsert) ClearUpdateTime() *PermissionUpsert {
	u.SetNull(permission.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *PermissionUpsert) SetDeleteTime(v int64) *PermissionUpsert {
	u.Set(permission.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDeleteTime() *PermissionUpsert {
	u.SetExcluded(permission.FieldDeleteTime)
	return u
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PermissionUpsert) AddDeleteTime(v int64) *PermissionUpsert {
	u.Add(permission.FieldDeleteTime, v)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PermissionUpsert) ClearDeleteTime() *PermissionUpsert {
	u.SetNull(permission.FieldDeleteTime)
	return u
}

// SetName sets the "name" field.
func (u *PermissionUpsert) SetName(v string) *PermissionUpsert {
	u.Set(permission.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateName() *PermissionUpsert {
	u.SetExcluded(permission.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PermissionUpsert) ClearName() *PermissionUpsert {
	u.SetNull(permission.FieldName)
	return u
}

// SetGuardName sets the "guard_name" field.
func (u *PermissionUpsert) SetGuardName(v string) *PermissionUpsert {
	u.Set(permission.FieldGuardName, v)
	return u
}

// UpdateGuardName sets the "guard_name" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateGuardName() *PermissionUpsert {
	u.SetExcluded(permission.FieldGuardName)
	return u
}

// ClearGuardName clears the value of the "guard_name" field.
func (u *PermissionUpsert) ClearGuardName() *PermissionUpsert {
	u.SetNull(permission.FieldGuardName)
	return u
}

// SetDescription sets the "description" field.
func (u *PermissionUpsert) SetDescription(v int32) *PermissionUpsert {
	u.Set(permission.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsert) UpdateDescription() *PermissionUpsert {
	u.SetExcluded(permission.FieldDescription)
	return u
}

// AddDescription adds v to the "description" field.
func (u *PermissionUpsert) AddDescription(v int32) *PermissionUpsert {
	u.Add(permission.FieldDescription, v)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PermissionUpsert) ClearDescription() *PermissionUpsert {
	u.SetNull(permission.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertOne) UpdateNewValues() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(permission.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(permission.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PermissionUpsertOne) Ignore() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertOne) DoNothing() *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreate.OnConflict
// documentation for more info.
func (u *PermissionUpsertOne) Update(set func(*PermissionUpsert)) *PermissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PermissionUpsertOne) SetUpdateTime(v int64) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PermissionUpsertOne) AddUpdateTime(v int64) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateUpdateTime() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PermissionUpsertOne) ClearUpdateTime() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *PermissionUpsertOne) SetDeleteTime(v int64) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PermissionUpsertOne) AddDeleteTime(v int64) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDeleteTime() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PermissionUpsertOne) ClearDeleteTime() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertOne) SetName(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PermissionUpsertOne) ClearName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearName()
	})
}

// SetGuardName sets the "guard_name" field.
func (u *PermissionUpsertOne) SetGuardName(v string) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetGuardName(v)
	})
}

// UpdateGuardName sets the "guard_name" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateGuardName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateGuardName()
	})
}

// ClearGuardName clears the value of the "guard_name" field.
func (u *PermissionUpsertOne) ClearGuardName() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearGuardName()
	})
}

// SetDescription sets the "description" field.
func (u *PermissionUpsertOne) SetDescription(v int32) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDescription(v)
	})
}

// AddDescription adds v to the "description" field.
func (u *PermissionUpsertOne) AddDescription(v int32) *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.AddDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsertOne) UpdateDescription() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PermissionUpsertOne) ClearDescription() *PermissionUpsertOne {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PermissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PermissionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PermissionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PermissionCreateBulk is the builder for creating many Permission entities in bulk.
type PermissionCreateBulk struct {
	config
	err      error
	builders []*PermissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Permission entities in the database.
func (pcb *PermissionCreateBulk) Save(ctx context.Context) ([]*Permission, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Permission, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PermissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PermissionCreateBulk) SaveX(ctx context.Context) []*Permission {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PermissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PermissionCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Permission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PermissionUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PermissionUpsertBulk {
	pcb.conflict = opts
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PermissionCreateBulk) OnConflictColumns(columns ...string) *PermissionUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PermissionUpsertBulk{
		create: pcb,
	}
}

// PermissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Permission nodes.
type PermissionUpsertBulk struct {
	create *PermissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(permission.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PermissionUpsertBulk) UpdateNewValues() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(permission.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(permission.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Permission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PermissionUpsertBulk) Ignore() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PermissionUpsertBulk) DoNothing() *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PermissionCreateBulk.OnConflict
// documentation for more info.
func (u *PermissionUpsertBulk) Update(set func(*PermissionUpsert)) *PermissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PermissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *PermissionUpsertBulk) SetUpdateTime(v int64) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetUpdateTime(v)
	})
}

// AddUpdateTime adds v to the "update_time" field.
func (u *PermissionUpsertBulk) AddUpdateTime(v int64) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.AddUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateUpdateTime() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateUpdateTime()
	})
}

// ClearUpdateTime clears the value of the "update_time" field.
func (u *PermissionUpsertBulk) ClearUpdateTime() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *PermissionUpsertBulk) SetDeleteTime(v int64) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDeleteTime(v)
	})
}

// AddDeleteTime adds v to the "delete_time" field.
func (u *PermissionUpsertBulk) AddDeleteTime(v int64) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.AddDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDeleteTime() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *PermissionUpsertBulk) ClearDeleteTime() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDeleteTime()
	})
}

// SetName sets the "name" field.
func (u *PermissionUpsertBulk) SetName(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PermissionUpsertBulk) ClearName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearName()
	})
}

// SetGuardName sets the "guard_name" field.
func (u *PermissionUpsertBulk) SetGuardName(v string) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetGuardName(v)
	})
}

// UpdateGuardName sets the "guard_name" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateGuardName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateGuardName()
	})
}

// ClearGuardName clears the value of the "guard_name" field.
func (u *PermissionUpsertBulk) ClearGuardName() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearGuardName()
	})
}

// SetDescription sets the "description" field.
func (u *PermissionUpsertBulk) SetDescription(v int32) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.SetDescription(v)
	})
}

// AddDescription adds v to the "description" field.
func (u *PermissionUpsertBulk) AddDescription(v int32) *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.AddDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PermissionUpsertBulk) UpdateDescription() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PermissionUpsertBulk) ClearDescription() *PermissionUpsertBulk {
	return u.Update(func(s *PermissionUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *PermissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PermissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PermissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PermissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
