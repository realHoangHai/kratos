// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realHoangHai/kratos/app/core/internal/data/ent/predicate"
	"github.com/realHoangHai/kratos/app/core/internal/data/ent/role"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RoleUpdate) SetUpdateTime(i int64) *RoleUpdate {
	ru.mutation.ResetUpdateTime()
	ru.mutation.SetUpdateTime(i)
	return ru
}

// AddUpdateTime adds i to the "update_time" field.
func (ru *RoleUpdate) AddUpdateTime(i int64) *RoleUpdate {
	ru.mutation.AddUpdateTime(i)
	return ru
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ru *RoleUpdate) ClearUpdateTime() *RoleUpdate {
	ru.mutation.ClearUpdateTime()
	return ru
}

// SetDeleteTime sets the "delete_time" field.
func (ru *RoleUpdate) SetDeleteTime(i int64) *RoleUpdate {
	ru.mutation.ResetDeleteTime()
	ru.mutation.SetDeleteTime(i)
	return ru
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeleteTime(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetDeleteTime(*i)
	}
	return ru
}

// AddDeleteTime adds i to the "delete_time" field.
func (ru *RoleUpdate) AddDeleteTime(i int64) *RoleUpdate {
	ru.mutation.AddDeleteTime(i)
	return ru
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ru *RoleUpdate) ClearDeleteTime() *RoleUpdate {
	ru.mutation.ClearDeleteTime()
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// ClearName clears the value of the "name" field.
func (ru *RoleUpdate) ClearName() *RoleUpdate {
	ru.mutation.ClearName()
	return ru
}

// SetGuardName sets the "guard_name" field.
func (ru *RoleUpdate) SetGuardName(s string) *RoleUpdate {
	ru.mutation.SetGuardName(s)
	return ru
}

// SetNillableGuardName sets the "guard_name" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableGuardName(s *string) *RoleUpdate {
	if s != nil {
		ru.SetGuardName(*s)
	}
	return ru
}

// ClearGuardName clears the value of the "guard_name" field.
func (ru *RoleUpdate) ClearGuardName() *RoleUpdate {
	ru.mutation.ClearGuardName()
	return ru
}

// SetDescription sets the "description" field.
func (ru *RoleUpdate) SetDescription(i int32) *RoleUpdate {
	ru.mutation.ResetDescription()
	ru.mutation.SetDescription(i)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDescription(i *int32) *RoleUpdate {
	if i != nil {
		ru.SetDescription(*i)
	}
	return ru
}

// AddDescription adds i to the "description" field.
func (ru *RoleUpdate) AddDescription(i int32) *RoleUpdate {
	ru.mutation.AddDescription(i)
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RoleUpdate) ClearDescription() *RoleUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdateTime(); !ok && !ru.mutation.UpdateTimeCleared() {
		v := role.UpdateDefaultUpdateTime()
		ru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.CreateTimeCleared() {
		_spec.ClearField(role.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.SetField(role.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedUpdateTime(); ok {
		_spec.AddField(role.FieldUpdateTime, field.TypeInt64, value)
	}
	if ru.mutation.UpdateTimeCleared() {
		_spec.ClearField(role.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := ru.mutation.DeleteTime(); ok {
		_spec.SetField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedDeleteTime(); ok {
		_spec.AddField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if ru.mutation.DeleteTimeCleared() {
		_spec.ClearField(role.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if ru.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := ru.mutation.GuardName(); ok {
		_spec.SetField(role.FieldGuardName, field.TypeString, value)
	}
	if ru.mutation.GuardNameCleared() {
		_spec.ClearField(role.FieldGuardName, field.TypeString)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedDescription(); ok {
		_spec.AddField(role.FieldDescription, field.TypeInt32, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeInt32)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RoleUpdateOne) SetUpdateTime(i int64) *RoleUpdateOne {
	ruo.mutation.ResetUpdateTime()
	ruo.mutation.SetUpdateTime(i)
	return ruo
}

// AddUpdateTime adds i to the "update_time" field.
func (ruo *RoleUpdateOne) AddUpdateTime(i int64) *RoleUpdateOne {
	ruo.mutation.AddUpdateTime(i)
	return ruo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ruo *RoleUpdateOne) ClearUpdateTime() *RoleUpdateOne {
	ruo.mutation.ClearUpdateTime()
	return ruo
}

// SetDeleteTime sets the "delete_time" field.
func (ruo *RoleUpdateOne) SetDeleteTime(i int64) *RoleUpdateOne {
	ruo.mutation.ResetDeleteTime()
	ruo.mutation.SetDeleteTime(i)
	return ruo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeleteTime(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetDeleteTime(*i)
	}
	return ruo
}

// AddDeleteTime adds i to the "delete_time" field.
func (ruo *RoleUpdateOne) AddDeleteTime(i int64) *RoleUpdateOne {
	ruo.mutation.AddDeleteTime(i)
	return ruo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (ruo *RoleUpdateOne) ClearDeleteTime() *RoleUpdateOne {
	ruo.mutation.ClearDeleteTime()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// ClearName clears the value of the "name" field.
func (ruo *RoleUpdateOne) ClearName() *RoleUpdateOne {
	ruo.mutation.ClearName()
	return ruo
}

// SetGuardName sets the "guard_name" field.
func (ruo *RoleUpdateOne) SetGuardName(s string) *RoleUpdateOne {
	ruo.mutation.SetGuardName(s)
	return ruo
}

// SetNillableGuardName sets the "guard_name" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableGuardName(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetGuardName(*s)
	}
	return ruo
}

// ClearGuardName clears the value of the "guard_name" field.
func (ruo *RoleUpdateOne) ClearGuardName() *RoleUpdateOne {
	ruo.mutation.ClearGuardName()
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RoleUpdateOne) SetDescription(i int32) *RoleUpdateOne {
	ruo.mutation.ResetDescription()
	ruo.mutation.SetDescription(i)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDescription(i *int32) *RoleUpdateOne {
	if i != nil {
		ruo.SetDescription(*i)
	}
	return ruo
}

// AddDescription adds i to the "description" field.
func (ruo *RoleUpdateOne) AddDescription(i int32) *RoleUpdateOne {
	ruo.mutation.AddDescription(i)
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RoleUpdateOne) ClearDescription() *RoleUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdateTime(); !ok && !ruo.mutation.UpdateTimeCleared() {
		v := role.UpdateDefaultUpdateTime()
		ruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint32))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.CreateTimeCleared() {
		_spec.ClearField(role.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.SetField(role.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(role.FieldUpdateTime, field.TypeInt64, value)
	}
	if ruo.mutation.UpdateTimeCleared() {
		_spec.ClearField(role.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := ruo.mutation.DeleteTime(); ok {
		_spec.SetField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(role.FieldDeleteTime, field.TypeInt64, value)
	}
	if ruo.mutation.DeleteTimeCleared() {
		_spec.ClearField(role.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if ruo.mutation.NameCleared() {
		_spec.ClearField(role.FieldName, field.TypeString)
	}
	if value, ok := ruo.mutation.GuardName(); ok {
		_spec.SetField(role.FieldGuardName, field.TypeString, value)
	}
	if ruo.mutation.GuardNameCleared() {
		_spec.ClearField(role.FieldGuardName, field.TypeString)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedDescription(); ok {
		_spec.AddField(role.FieldDescription, field.TypeInt32, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(role.FieldDescription, field.TypeInt32)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
