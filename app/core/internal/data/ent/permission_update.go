// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realHoangHai/kratos/app/core/internal/data/ent/permission"
	"github.com/realHoangHai/kratos/app/core/internal/data/ent/predicate"
)

// PermissionUpdate is the builder for updating Permission entities.
type PermissionUpdate struct {
	config
	hooks     []Hook
	mutation  *PermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PermissionUpdate builder.
func (pu *PermissionUpdate) Where(ps ...predicate.Permission) *PermissionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PermissionUpdate) SetUpdateTime(i int64) *PermissionUpdate {
	pu.mutation.ResetUpdateTime()
	pu.mutation.SetUpdateTime(i)
	return pu
}

// AddUpdateTime adds i to the "update_time" field.
func (pu *PermissionUpdate) AddUpdateTime(i int64) *PermissionUpdate {
	pu.mutation.AddUpdateTime(i)
	return pu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pu *PermissionUpdate) ClearUpdateTime() *PermissionUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetDeleteTime sets the "delete_time" field.
func (pu *PermissionUpdate) SetDeleteTime(i int64) *PermissionUpdate {
	pu.mutation.ResetDeleteTime()
	pu.mutation.SetDeleteTime(i)
	return pu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDeleteTime(i *int64) *PermissionUpdate {
	if i != nil {
		pu.SetDeleteTime(*i)
	}
	return pu
}

// AddDeleteTime adds i to the "delete_time" field.
func (pu *PermissionUpdate) AddDeleteTime(i int64) *PermissionUpdate {
	pu.mutation.AddDeleteTime(i)
	return pu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (pu *PermissionUpdate) ClearDeleteTime() *PermissionUpdate {
	pu.mutation.ClearDeleteTime()
	return pu
}

// SetName sets the "name" field.
func (pu *PermissionUpdate) SetName(s string) *PermissionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *PermissionUpdate) ClearName() *PermissionUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetGuardName sets the "guard_name" field.
func (pu *PermissionUpdate) SetGuardName(s string) *PermissionUpdate {
	pu.mutation.SetGuardName(s)
	return pu
}

// SetNillableGuardName sets the "guard_name" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableGuardName(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetGuardName(*s)
	}
	return pu
}

// ClearGuardName clears the value of the "guard_name" field.
func (pu *PermissionUpdate) ClearGuardName() *PermissionUpdate {
	pu.mutation.ClearGuardName()
	return pu
}

// SetDescription sets the "description" field.
func (pu *PermissionUpdate) SetDescription(s string) *PermissionUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PermissionUpdate) SetNillableDescription(s *string) *PermissionUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *PermissionUpdate) ClearDescription() *PermissionUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// Mutation returns the PermissionMutation object of the builder.
func (pu *PermissionUpdate) Mutation() *PermissionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PermissionUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PermissionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PermissionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PermissionUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok && !pu.mutation.UpdateTimeCleared() {
		v := permission.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PermissionUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PermissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint32))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.ClearField(permission.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(permission.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permission.FieldUpdateTime, field.TypeInt64, value)
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.ClearField(permission.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.DeleteTime(); ok {
		_spec.SetField(permission.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedDeleteTime(); ok {
		_spec.AddField(permission.FieldDeleteTime, field.TypeInt64, value)
	}
	if pu.mutation.DeleteTimeCleared() {
		_spec.ClearField(permission.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(permission.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.GuardName(); ok {
		_spec.SetField(permission.FieldGuardName, field.TypeString, value)
	}
	if pu.mutation.GuardNameCleared() {
		_spec.ClearField(permission.FieldGuardName, field.TypeString)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PermissionUpdateOne is the builder for updating a single Permission entity.
type PermissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (puo *PermissionUpdateOne) SetUpdateTime(i int64) *PermissionUpdateOne {
	puo.mutation.ResetUpdateTime()
	puo.mutation.SetUpdateTime(i)
	return puo
}

// AddUpdateTime adds i to the "update_time" field.
func (puo *PermissionUpdateOne) AddUpdateTime(i int64) *PermissionUpdateOne {
	puo.mutation.AddUpdateTime(i)
	return puo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (puo *PermissionUpdateOne) ClearUpdateTime() *PermissionUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetDeleteTime sets the "delete_time" field.
func (puo *PermissionUpdateOne) SetDeleteTime(i int64) *PermissionUpdateOne {
	puo.mutation.ResetDeleteTime()
	puo.mutation.SetDeleteTime(i)
	return puo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDeleteTime(i *int64) *PermissionUpdateOne {
	if i != nil {
		puo.SetDeleteTime(*i)
	}
	return puo
}

// AddDeleteTime adds i to the "delete_time" field.
func (puo *PermissionUpdateOne) AddDeleteTime(i int64) *PermissionUpdateOne {
	puo.mutation.AddDeleteTime(i)
	return puo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (puo *PermissionUpdateOne) ClearDeleteTime() *PermissionUpdateOne {
	puo.mutation.ClearDeleteTime()
	return puo
}

// SetName sets the "name" field.
func (puo *PermissionUpdateOne) SetName(s string) *PermissionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *PermissionUpdateOne) ClearName() *PermissionUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetGuardName sets the "guard_name" field.
func (puo *PermissionUpdateOne) SetGuardName(s string) *PermissionUpdateOne {
	puo.mutation.SetGuardName(s)
	return puo
}

// SetNillableGuardName sets the "guard_name" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableGuardName(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetGuardName(*s)
	}
	return puo
}

// ClearGuardName clears the value of the "guard_name" field.
func (puo *PermissionUpdateOne) ClearGuardName() *PermissionUpdateOne {
	puo.mutation.ClearGuardName()
	return puo
}

// SetDescription sets the "description" field.
func (puo *PermissionUpdateOne) SetDescription(s string) *PermissionUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PermissionUpdateOne) SetNillableDescription(s *string) *PermissionUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *PermissionUpdateOne) ClearDescription() *PermissionUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// Mutation returns the PermissionMutation object of the builder.
func (puo *PermissionUpdateOne) Mutation() *PermissionMutation {
	return puo.mutation
}

// Where appends a list predicates to the PermissionUpdate builder.
func (puo *PermissionUpdateOne) Where(ps ...predicate.Permission) *PermissionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PermissionUpdateOne) Select(field string, fields ...string) *PermissionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Permission entity.
func (puo *PermissionUpdateOne) Save(ctx context.Context) (*Permission, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PermissionUpdateOne) SaveX(ctx context.Context) *Permission {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PermissionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PermissionUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok && !puo.mutation.UpdateTimeCleared() {
		v := permission.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PermissionUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := permission.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Permission.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PermissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PermissionUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PermissionUpdateOne) sqlSave(ctx context.Context) (_node *Permission, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(permission.Table, permission.Columns, sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUint32))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Permission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, permission.FieldID)
		for _, f := range fields {
			if !permission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != permission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.ClearField(permission.FieldCreateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(permission.FieldUpdateTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdateTime(); ok {
		_spec.AddField(permission.FieldUpdateTime, field.TypeInt64, value)
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.ClearField(permission.FieldUpdateTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.DeleteTime(); ok {
		_spec.SetField(permission.FieldDeleteTime, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedDeleteTime(); ok {
		_spec.AddField(permission.FieldDeleteTime, field.TypeInt64, value)
	}
	if puo.mutation.DeleteTimeCleared() {
		_spec.ClearField(permission.FieldDeleteTime, field.TypeInt64)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(permission.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(permission.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.GuardName(); ok {
		_spec.SetField(permission.FieldGuardName, field.TypeString, value)
	}
	if puo.mutation.GuardNameCleared() {
		_spec.ClearField(permission.FieldGuardName, field.TypeString)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(permission.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(permission.FieldDescription, field.TypeString)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Permission{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{permission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
