// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"github.com/realHoangHai/kratos/api/gen/go/conf"
	"github.com/realHoangHai/kratos/app/admin/internal/data"
	"github.com/realHoangHai/kratos/app/admin/internal/server"
	"github.com/realHoangHai/kratos/app/admin/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	authenticator := data.NewAuthenticator(bootstrap)
	engine := data.NewAuthorizer()
	discovery := data.NewDiscovery(bootstrap)
	userServiceClient := data.NewUserServiceClient(discovery, bootstrap)
	client := data.NewRedisClient(bootstrap)
	dataData, cleanup, err := data.NewData(client, authenticator, engine, logger)
	if err != nil {
		return nil, nil, err
	}
	userToken := data.NewUserTokenRepo(dataData, authenticator, logger)
	authenticationService := service.NewAuthenticationService(logger, userServiceClient, userToken)
	userService := service.NewUserService(logger, userServiceClient)
	httpServer := server.NewHTTPServer(bootstrap, logger, authenticator, engine, authenticationService, userService)
	app := newApp(logger, registrar, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
